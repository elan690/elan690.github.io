<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://elan690.github.io/atom.xml" rel="self"/>
  <link href="http://elan690.github.io/"/>
  <updated>2014-10-26T17:53:52+08:00</updated>
  <id>http://elan690.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Class1014]]></title>
    <link href="http://elan690.github.io/blog/2014/10/26/class1014/"/>
    <updated>2014-10-26T16:09:57+08:00</updated>
    <id>http://elan690.github.io/blog/2014/10/26/class1014</id>
    <content type="html"><![CDATA[<h1>SaaS1014_class4_note</h1>

<h2>Markdown and Ruby</h2>

<h3>fork 的用途</h3>

<p>一般不會隨意開放給大家commit，所以有三種方法:<br/>
1. watch<br/>
2. star - 如同like功能<br/>
3. fork - 如同copy功能<br/>
*的意思: 自己去展開目前此位置所有符合條件的檔名<br/>
HEAD ： 是指目前所在的位置，所以目前checkout 在哪裡就會是HEAD到那個地方
Work永遠會是指最新的變動下的branch ; 而如果追溯到較早的位置時，HEAD就會跟著變動到那個位置。 所以打git diff會知道要和誰比的原因 就是跟HEAD比較</p>

<h2>比較checkout and reset</h2>

<p>*git checkout &lsquo;commit編號&rsquo; &ndash;>確認在某個時間點上專案的變動，只是將HEAD帶到那個位置</p>

<p>*git reset &lsquo;commit編號&rsquo; &ndash;>則會還原到那commit的狀態，則在之後發生的commit就會都不見
(只要記得commit的值，還是回得去，但如果忘記commit的值，則就無法追溯回去那個點)</p>

<p><em>git reset “commit 值” &ndash;hard
</em>&lt;如果沒有 –hard?></p>

<p>有&ndash; hard：直接還原到想要的位置，commit的位置，歷史會比較乾淨
沒有&ndash;hard : 則會將之前修改過得紀錄顯示為還原位置的狀態（working directly） ; 如果覺得有所疑慮，可以再去檢視內容</p>

<p>-ctrl c &ndash;>  直接關掉視窗
-ctrl z &ndash;> 保留視窗的工作
-fg (前景視窗)
-gitk&ndash;>開啟GUI形式的git log
-tag : head 可以找到歷史的某個commit點，作標籤</p>

<h3>tag /Checkout 的比較</h3>

<p>-git branch（找到所有的分枝）
-git tag （找到所有的標籤）
-git  checkout 到過去的某個點（HEAD也會跟這帶到那個點）
-rebase (先不要用！)
-git revert(回覆歷史中commit 的某個動作
&ndash;>會直接作和上一步相反的動作, 且自動產生一個commit ; 和reset的不同在於
-reset是往前還原上一步驟，但向後追溯的歷史是不會被保留的 ; 但revert是可以作為保留參考的步驟
-git remote
列出現在所有remote的位置
-git remote -v (則會出現完整的網址)
如果從遠端clone下來的專案，remote則會出現原先的網址</p>

<h3>git pull /fetch</h3>

<p>-git branch -a (會顯示出所有的branch  包含遠端的電腦)
若只打fetch 則只會和遠端的電腦同步;若打pull則會同時同步兩台電腦</p>

<p>-如果遠端與手邊電腦的commit紀錄是不相同的話，可以先將手變得commit放到另一個branch，然後將自己的master刪除，若打 git branch -a （會出現新的branch 和遠端的master) ，則打git pull則會自動拉下所有遠端電腦的master (則自動同步)（TBC）</p>

<p>-如果兩邊都有作發展，若merge的話就會自動在產生一個commit(稱為 &lsquo;git merge master&rsquo;)
-fast forward : (會自己reply: 圖形顯示是直線merge)
-un fast forward : (會有一個新的commit)
-git merge mason &ndash;no&ndash;ff (強制不只reply 還要產生commit)
-git branch -b mason (-b : 產生一個新的branch 並且直接checkout 過去)
（-D -d的差異：-d只有在merge的時候 才會生效 ; 但-D則是不論有沒有merge，都可直接刪除）</p>

<h3>irb(可以在上面直接執行)</h3>

<ol>
<li>touch ex01.rb</li>
<li>nano ex01.rb(編輯與存檔)
ruby一定開頭要用puts/prints</li>
<li>cat  ex01.rb (可以看裡面的程式碼)</li>
<li>ruby ex01.rb（可以看到結果）</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Saas]]></title>
    <link href="http://elan690.github.io/blog/2014/10/14/saas/"/>
    <updated>2014-10-14T21:43:07+08:00</updated>
    <id>http://elan690.github.io/blog/2014/10/14/saas</id>
    <content type="html"><![CDATA[<h1>SaaS class4 - Markdown and octopress</h1>

<h2>Markdown</h2>

<p>時間：2014/10/14
地點：Epoch Winnie house</p>
]]></content>
  </entry>
  
</feed>
